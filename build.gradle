plugins {
  id "org.kordamp.markdown.convert" version "1.2.0" // https://github.com/aalmiray/markdown-gradle-plugin
  id "com.github.ben-manes.versions" version "0.27.0" // update check task: dependencyUpdates  https://github.com/ben-manes/gradle-versions-plugin
}

apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = '1.8' // build compatiblity with java 8 and newer
targetCompatibility = '1.8' // run compatiblity with java 8 and newer

sourceSets.main.java.srcDir 'src'
//sourceSets.main.java.srcDir 'explorer_src' // optional explorer needs jfx
sourceSets.main.java.srcDir 'dsl/src_generated'


// check for updates:
//gradle dependencyUpdates

def isNonStable = { String version ->
  return version.contains('alpha') || version.contains('beta') 
}

dependencyUpdates {
  rejectVersionIf {  // reject all non stable versions
    isNonStable(it.candidate.version)
  }
}

repositories {
    jcenter()
}

dependencies {
  	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.0'
  	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.0'
  	compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.13.0' // needed for jetty logger
  	
  	compile group: 'org.antlr', name: 'antlr4-runtime', version: '4.7.2'
  	compile group: 'org.javassist', name: 'javassist', version: '3.26.0-GA'
  	
  	compile group: 'org.mapdb', name: 'mapdb', version: '1.0.9' // warning: newer versions v2 do break storage layout
  	
  	compile group: 'org.xerial.snappy', name: 'snappy-java', version: '1.1.7.3' // caution: newer versions may break storage layout
  	
  	compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
  	
  	compile group: 'org.json', name: 'json', version: '20190722'
  	compile group: 'org.yaml', name: 'snakeyaml', version: '1.25'
  	compile group: 'com.opencsv', name: 'opencsv', version: '4.6' // warning: API at v5.0 breaks
  	compile group: 'org.ini4j', name: 'ini4j', version: '0.5.4' 
  	compile group: 'ar.com.hjg', name: 'pngj', version: '2.1.0'
  	compile group: 'com.github.luben', name: 'zstd-jni', version: '1.4.4-3' // caution: newer versions may break storage layout
  	compile group: 'me.lemire.integercompression', name: 'JavaFastPFOR', version: '0.1.12' // caution: newer versions may break strorage layout
  	
  	compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.25.v20191220'
  	compile group: 'org.eclipse.jetty', name: 'jetty-security', version: '9.4.25.v20191220'
  	
  	compile group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.10.7'
	runtime group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.10.7'
	runtime group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.10.7'
	
	compile group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
	
	compile group: 'org.gdal', name: 'gdal', version: '2.2.0' // caution: newer versions may break compatibility
  	
  	compile group: 'org.influxdb', name: 'influxdb-java', version: '2.17'
  	compile group: 'com.h2database', name: 'h2', version: '1.4.200'
}

dependencies {
    //compile fileTree('lib') // include local libraries
    //compileOnly files('/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/jfxrt.jar') //optional explorer needs jfx - dependency openjfx on ubuntu (openjdk does not include openjfx), correct path for at least OpenJDK 10
}

jar {
	from file('src/log4j2.xml')
	from file('src/command_descriptions.yaml')
	destinationDir file('package')
	
	manifest {	
        attributes 	'Built-Date': new Date(),
					'Built-JDK': System.getProperty('java.version')
    }
}

tasks.withType(JavaCompile){
	options.encoding = 'UTF-8' // set text encoding of java files to UTF-8
	
	def v = JavaVersion.current()	
	if(v==JavaVersion.VERSION_1_1||v==JavaVersion.VERSION_1_2||v==JavaVersion.VERSION_1_3||v==JavaVersion.VERSION_1_4||v==JavaVersion.VERSION_1_5||v==JavaVersion.VERSION_1_6||v==JavaVersion.VERSION_1_7) {
		throw new GradleException('java version 8 or newer needed for build')
	}
	
	if(v != JavaVersion.VERSION_1_8) { // java version is newer than java 8
		logger.warn('WARNING: Building TubeDB with java newer than java 8 results in package that is not fully compatible with java 8 runtime.')
	}	
	
	/*if(v != JavaVersion.VERSION_1_8) { // java version is newer than java 8 (java 9 with modules)
		options.compilerArgs.addAll(["--add-exports", "javafx.base/com.sun.javafx.binding=ALL-UNNAMED"]) // compatiblity to modules in java 9 and newer
	}*/

	//options.deprecation = true
	//options.listFiles = true
	//options.verbose = true
}

task clean_package(type: Delete) {
	description 'delete folder package'
	delete 'package'
}

task copy_lib(type: Copy) {
	description 'copy folder lib to package'
	from files(configurations.runtime)
    into 'package/lib'
}

task copy_add(type: Copy) {
	description 'copy folder add to package'
	from fileTree('add')
	into 'package'
}

task copy_add_windows(type: Copy) {
	description 'copy folder add_windows to package'
	from fileTree('add_windows')
	into 'package'
}

task copy_add_linux(type: Copy) {
	description 'copy folder add_linux to package'
	from fileTree('add_linux')
	into 'package'
}

task copy_webcontent(type: Copy) {
	description 'copy folder webcontent to package'
	from fileTree('webcontent')
	into 'package/webcontent'
}

task copy_build(type: Copy, dependsOn: [jar]) {
	description 'copy compiled java jar file to package'
	from fileTree('build/libs')
	into 'package'
}

task copy_config(type: Copy, dependsOn: [jar]) {
	description 'copy folder config to package'
	from fileTree('config')
	into 'package/config'
}

task _build_package(dependsOn:[ clean_package, copy_build, copy_lib, copy_webcontent, copy_add, copy_config, copy_add_linux ]) {
	group = 'project'
	description 'create TubeDB package for Linux'	
}

task _build_package_windows(dependsOn:[ clean_package, copy_build, copy_lib, copy_webcontent, copy_add, copy_config, copy_add_windows ]) {
	group = 'project' 
	description 'create TubeDB package for Windows'		
}

task _build_package_linux_windows(dependsOn:[ clean_package, copy_build, copy_lib, copy_webcontent, copy_add, copy_config, copy_add_linux, copy_add_windows ]) {
	group = 'project'
	description 'create TubeDB package for Linux and Windows'	
}

task _create_javadoc(type: Javadoc) {
	group = 'project'
	description 'create javadoc for TubeDB'
	source = sourceSets.main.allJava
	destinationDir = file('docs/javadoc')
	title = 'TubeDB'
	options.header = 'TubeDB'
	options.windowTitle = 'TubeDB'
	options.overview = 'src/overview.html'
	options.links("http://docs.oracle.com/javase/8/docs/api")
	options.links("https://docs.oracle.com/javase/8/javafx/api")
	options.noTimestamp = true
}