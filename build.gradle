apply plugin: 'java'

sourceCompatibility = '1.8' // build compatiblity with java 8 and newer
targetCompatibility = '1.8' // run compatiblity with java 8 and newer

dependencies {
    compile fileTree('lib') // include local libraries
    compileOnly files('/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/jfxrt.jar') //optional dependency for openjfx on ubuntu (openjdk does not include openjfx), correct path for at least OpenJDK 10
}

sourceSets.main.java.srcDir 'src'
sourceSets.main.java.srcDir 'dsl/src_generated'

jar {
	from file('src/log4j2.xml')
	from file('src/command_descriptions.yaml')
	destinationDir file('package')
	
	manifest {	
        attributes 	'Built-Date': new Date(),
					'Built-JDK': System.getProperty('java.version')
    }
}

tasks.withType(JavaCompile){
	options.encoding = 'UTF-8' // set text encoding of java files to UTF-8
	
	def v = JavaVersion.current()	
	if(v==JavaVersion.VERSION_1_1||v==JavaVersion.VERSION_1_2||v==JavaVersion.VERSION_1_3||v==JavaVersion.VERSION_1_4||v==JavaVersion.VERSION_1_5||v==JavaVersion.VERSION_1_6||v==JavaVersion.VERSION_1_7) {
		throw new GradleException('java version 8 or newer needed for build')
	}
	
	if(v != JavaVersion.VERSION_1_8) { // java version is newer than java 8
		logger.warn('WARNING: Building TubeDB with java newer than java 8 results in package that is not fully compatible with java 8 runtime.')
	}	
	
	/*if(v != JavaVersion.VERSION_1_8) { // java version is newer than java 8 (java 9 with modules)
		options.compilerArgs.addAll(["--add-exports", "javafx.base/com.sun.javafx.binding=ALL-UNNAMED"]) // compatiblity to modules in java 9 and newer
	}*/

	//options.deprecation = true
	//options.listFiles = true
	//options.verbose = true
}

task clean_package(type: Delete) {
	description 'delete folder package'
	delete 'package'
}

task copy_lib(type: Copy) {
	description 'copy folder lib to package'
	from files(configurations.runtime)
    into 'package/lib'
}

task copy_add(type: Copy) {
	description 'copy folder add to package'
	from fileTree('add')
	into 'package'
}

task copy_add_windows(type: Copy) {
	description 'copy folder add_windows to package'
	from fileTree('add_windows')
	into 'package'
}

task copy_add_linux(type: Copy) {
	description 'copy folder add_linux to package'
	from fileTree('add_linux')
	into 'package'
}

task copy_webcontent(type: Copy) {
	description 'copy folder webcontent to package'
	from fileTree('webcontent')
	into 'package/webcontent'
}

task copy_build(type: Copy, dependsOn: [jar]) {
	description 'copy compiled java jar file to package'
	from fileTree('build/libs')
	into 'package'
}

task copy_config(type: Copy, dependsOn: [jar]) {
	description 'copy folder config to package'
	from fileTree('config')
	into 'package/config'
}

task _build_package(dependsOn:[ clean_package, copy_build, copy_lib, copy_webcontent, copy_add, copy_config, copy_add_linux ]) {
	group = 'project'
	description 'create TubeDB package for Linux'	
}

task _build_package_windows(dependsOn:[ clean_package, copy_build, copy_lib, copy_webcontent, copy_add, copy_config, copy_add_windows ]) {
	group = 'project' 
	description 'create TubeDB package for Windows'		
}

task _build_package_linux_windows(dependsOn:[ clean_package, copy_build, copy_lib, copy_webcontent, copy_add, copy_config, copy_add_linux, copy_add_windows ]) {
	group = 'project'
	description 'create TubeDB package for Linux and Windows'	
}

task _create_javadoc(type: Javadoc) {
	group = 'project'
	description 'create javadoc for TubeDB'
	source = sourceSets.main.allJava
	destinationDir = file('docs/javadoc')
	title = 'TubeDB'
	options.header = 'TubeDB'
	options.windowTitle = 'TubeDB'
	options.overview = 'src/overview.html'
	options.links("http://docs.oracle.com/javase/8/docs/api")
	options.links("https://docs.oracle.com/javase/8/javafx/api")
	options.noTimestamp = true
}